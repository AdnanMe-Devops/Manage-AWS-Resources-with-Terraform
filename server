Creating an EC2 Instance with Terraform

1. Add a couple of subnets to the Terraform configuration:

Copy code
cat >> main.tf <<'EOF'
resource "aws_subnet" "web_subnet_1" {
  vpc_id            = "${aws_vpc.web_vpc.id}"
  cidr_block        = "192.168.100.0/25"
  availability_zone = "us-west-2a"

  tags {
    Name = "Web Subnet 1"
  }
}

resource "aws_subnet" "web_subnet_2" {
  vpc_id            = "${aws_vpc.web_vpc.id}"
  cidr_block        = "192.168.100.128/25"
  availability_zone = "us-west-2b"

  tags {
    Name = "Web Subnet 2"
  }
}

EOF
The subnets vpc_id argument use interpolation syntax to obtain the Web VPC ID. Attributes for a resource are listed on the Terraform docs page for the resource. For example, the attributes for AWS VPCs are listed here. To keep the configuration minimal, the subnets will be private subnets only accessible inside the VPC. That is, you won't add an internet gateway and modify route tables to make the instances accessible over the internet. The two subnet configurations have a lot of duplication. 
 

2. Add an EC2 instance to the first subnet in the configuration:


cat >> main.tf <<'EOF'
resource "aws_instance" "web" {
  ami           = "ami-0fb83677"
  instance_type = "t2.micro"
  subnet_id     = "${aws_subnet.web_subnet_1.id}"
  
  tags {
    Name = "Web Server 1"
  }
}

EOF
The subnet_id is set using interpolation syntax to the ID of the first web subnet. Terraform is able to determine the order it needs to create the resources to be able to use the interpolate the values. Particularly, web_subnet_1 must be created before web, and web_vpc must be created before both web_subnet_1 and web_subnet_2.

 3. Plan and apply the changes using the apply command:
terraform apply

Note that the first action Terraform takes is to Refreshing state. That is so Terraform can detect if the VPC resource has diverged from the desired state described in the configuration. In this case, the actual state matches the desired state for the VPC resource and no changes are required. After that, three resources that will be added are listed. 

4. Enter yes to accept the execution plan, and create the resources:
Observe the order that the resources were created in and verify they follow the implicit dependencies in the configuration file.
5. View the Terraform state file to see that the implicit dependencies have been stored in the state:
more terraform.tfstate
The depends_on property lists all dependencies of a resource. In the above image, the dependence of the web instance on web_subnet_1 is shown. The graph command visualizes the dependency graph created by all of the dependencies. The graph for the current 
